{#The default for current felix is to have col-sm-6 now no default option can be added (set to true)#}
<div class="multisection-section section-agency-map {% if not section.noDefault %} col-sm-6 {% endif %} {{ section.size }}">
    <div id="home_map_canvas" style="height: 100%;">
</div>
<script>
    //Module code and pass in jquery as $
    (function MapSectionModule($){

        var map = {};
        var markers = [];

        {#Here we iterate through the agencies and if they have coords we add them to the array#}
        var agenciesData = [
            {% for agency in agencies %}
            {% if agency['meta']['coords_latitude'] or agency['meta']['officeAddress']%}
            {
                lat: {{agency['meta']['coords_latitude'] ? agency['meta']['coords_latitude'] : 'false'}},
                lng: {{agency['meta']['coords_longitude'] ? agency['meta']['coords_longitude'] : 'false'}},
                address: "{{agency['meta']['officeAddress'] ? agency['meta']['officeAddress']|escape('js') : ""}}"
            },
            {% endif %}
            {% endfor %}
        ];


        //On load
        google.maps.event.addDomListener(window, 'load', function mapOnLoadHandler(){
            if(agenciesData.length > 0) {
                //Call geocode fallback and get array of promises
                var requests = initialiseData();

                //wait for promises to be resolved which will be once geocoding has been completed
                $.when.apply(null, requests).done(function geocodeDoneHandle() {
                    createMapAndMarkers();
                });
            }
        });


        /*
         * This function will set up an array of promises each dependent on a geocode call created in a for loop
         * for each agency without a lat and long but with an address. used as a fall pack in the event server side geocode failed
         * due to limit reached or other problem.
         *
         * @return request an array of promises for each geocode request
         */
        function initialiseData() {

            //Array of deferred objects
            var requests = [];

            for (var i = 0; i < agenciesData.length; i++) {
                if (!agenciesData[i].lat || !agenciesData[i].lng && agenciesData[i].address) {

                    //pass the current value of i into this IIFE
                    (function getLatLng(i) {

                        //create and push promise to array
                        var d = $.Deferred();
                        requests.push(d.promise());

                        //set time out used as google has a hit per second limit, each request should fire 100 milliseconds apart
                        setTimeout(function geocodeTimeout () {
                            //geocode request
                            var geocoder = new google.maps.Geocoder();
                            geocoder.geocode({'address': agenciesData[i].address}, function geocodeResponseHandle (results, status) {
                                if (status == google.maps.GeocoderStatus.OK) {

                                    //assign lat and lng values to the correct object property
                                    agenciesData[i].lat = results[0].geometry.location.lat();
                                    agenciesData[i].lng = results[0].geometry.location.lng();

                                    //resolve the promise
                                    d.resolve();
                                }
                            });
                        },(i*100));
                    })(i);
                }
            }

            return requests;
        }


        /*
         * Creates a map then a marker for each agency before setting the map bounds to fit each marker
         */
        function createMapAndMarkers(){

            if(agenciesData[0]) {

                var myOptions = {
                    zoom: 15,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    scrollwheel: false,
                    draggable: false{% if theme.map_style == 'mono' %},
                    styles: [{"stylers": [{"saturation": -100}]}]{% endif %}
                };

                //Create map
                map = new google.maps.Map(document.getElementById('home_map_canvas'), myOptions);

                //Custom Marker
                        {% if theme.custom_map_icon %}var image = "{{ theme.custom_map_icon }}";{% endif %}

                var displayMultipleAgencies = {{ theme.multiple_agencies ? theme.multiple_agencies : 'false' }};
                var i = 0;

                //create each marker while there are still markers to create and displayMultipleAgencies is true
                do {
                    //If agency has lat and lang which it should
                    if(agenciesData[i].lat && agenciesData[i].lng) {

                        markers[i] = new google.maps.Marker({
                            position: new google.maps.LatLng(agenciesData[i]["lat"], agenciesData[i]["lng"]),
                            map: map,{% if theme.custom_map_icon %}
                            icon: image{% else %}
                            icon: {
                                path: google.maps.SymbolPath.CIRCLE,
                                fillOpacity: 1,
                                fillColor: "{{ theme.brand_color ? theme.brand_color : 000080 }}",
                                strokeOpacity: 0,
                                strokeColor: '#fff000',
                                strokeWeight: 3.0,
                                scale: 12 //pixels
                            },
                            {% endif %}
                        });
                    }

                    i++;
                } while (i < agenciesData.length && displayMultipleAgencies);

                fitMapToMarkers();

                //On window resize
                $(window).resize(function mapResizehandler(){
                    fitMapToMarkers();
                });
            }
        }


        /*
         * Gets the position of each marker then creates a bounds amd zoom for the map so all markers are displayed
         */
        function fitMapToMarkers() {
            //create new bounds
            var bounds = new google.maps.LatLngBounds();


            for (var i = 0; i < markers.length; i++) {
                bounds.extend(markers[i].getPosition());
            }

            //center the map to the geometric center of all markers
            map.setCenter(bounds.getCenter());

            //fitBounds is async so we add an event listener - Adjust Zoom appropriately
            google.maps.event.addListenerOnce(map, 'bounds_changed', function () {
                //to ensure markers aren't on the edge
                //map.setZoom(map.getZoom()); - doesn't appear to be needed

                //if There is only one marker set zoom to default
                if (this.getZoom() > 15 && markers.length == 1) {
                    this.setZoom(15);
                }
            });

            map.fitBounds(bounds);
        }
    })(jQuery);

</script>
</div>
